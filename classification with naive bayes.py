# -*- coding: utf-8 -*-
"""TUGAS PEMROGRAMAN 03 PENGANTAR AIipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NmvtEmg1H8IBGdEiAqSSD37zig_PESZa

**TUGAS PEMROGRAMAN 03 - LEARNING**

**PENGANTAR KECERDASAN BUATAN**

Nama Kelompok :
1. Aisyah Dliya Ramadhanti (1301201154)
2. Fijar Yasmina Pritama (130120)

## **ALGORITMA NAIVE BAYES**

***MEMBACA DATA***
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import math
from google.colab import files
up = files.upload()
df_train = pd.read_excel("traintest (1).xlsx", sheet_name = "train")
df_test = pd.read_excel("traintest (1).xlsx", sheet_name = "test")

"""***RUMUS MEAN X1, X2 DAN X3***"""

#RATA-RATA DARI X1
def mean_x1(listTrain):
  sumx1 = 0
  for i in range(len(listTrain)):
    sumx1 = sumx1 + listTrain[i][1]
  return sumx1 / (len(listTrain))
  
#RATA-RATA DARI X2
def mean_x2(listTrain):
  sumx2 = 0
  for i in range(len(listTrain)):
    sumx2 = sumx2 + listTrain[i][2]
  return sumx2 / (len(listTrain))

#RATA-RATA DARI X3
def mean_x3(listTrain):
  sumx3 = 0
  for i in range(len(listTrain)):
    sumx3 = sumx3 + listTrain[i][3]
  return sumx3 / (len(listTrain))

"""***RUMUS STANDAR DEVIASI X1, X2, DAN X3***"""

#VARIANSI DARI X1
def variansi_x1(listTrain):
  avg = mean_x1(listTrain)
  sumX1 = 0
  for i in range(len(listTrain)):
    sumX1 = (sumX1 +((listTrain[i][1] - avg)**2))
  
  resultX1 = (sumX1 / (len(listTrain)-1))
  return math.sqrt(resultX1)

#VARIANSI DARI X2
def variansi_x2(listTrain):
  avg = mean_x2(listTrain)
  sumX2 = 0
  for i in range(len(listTrain)):
    sumX2 = (sumX2 +((listTrain[i][2] - avg)**2))
  
  resultX2 = (sumX2 / (len(listTrain)-1))
  return math.sqrt(resultX2)

#VARIANSI DARI X3
def variansi_x3(listTrain):
  avg = mean_x3(listTrain)
  sumX3 = 0
  for i in range(len(listTrain)):
    sumX3 = (sumX3 +((listTrain[i][3] - avg)**2))
  
  resultX3 = (sumX3 / (len(listTrain)-1))
  return math.sqrt(resultX3)

"""***RUMUS NAIVE BAYES DATA KONTINU***"""

def naiveBayes(mean, variansi, number):
  a = 1 / (variansi * math.sqrt(2*3.14))
  b = math.exp(-((number - mean)**2) / (2*variansi**2))
  return a * b

"""***MEMBANGUN MODEL***

Menggunakan Holdout Validation 12.5% dan 87.5%
"""

dataTrain = np.array(df_train)

#MENDEKLARASIKAN ARRAY DATA LATIH DAN DATA UJI
dataLatih = []
dataUji = []

#DATA LATIH DAN DATA UJI
nAwal = 0.875 * len(dataTrain)

dataLatih = dataTrain[:int(nAwal)]
dataUji = dataTrain[int(nAwal): len(dataTrain)]

print("----DATA LATIH----")
data_latih = pd.DataFrame(dataLatih, columns =['ID', 'X1', 'X2', 'X3', 'y'])
print(data_latih)
#MENDEKLARASI DATA LATIH y = 1
TrainYes = []
#MENDEKLARASI DATA LATIH y = 0
TrainNo = []

#MODEL DATA LATIH y = 1 
modelYes = [[0,0], [0,0], [0,0]]
#MODEL DATA LATIH y = 0
modelNo =[[0,0], [0,0], [0,0]]


#DATA LATIH
for i in range(len(dataLatih)):
  if (dataLatih[i][4] == 1) :
    TrainYes.append(dataLatih[i])
  else:
    TrainNo.append(dataLatih[i])

#MEMBANGUN MODEL
modelYes[0][0] = mean_x1(TrainYes)
modelYes[0][1] = variansi_x1(TrainYes)
modelYes[1][0] = mean_x2(TrainYes)
modelYes[1][1] = variansi_x2(TrainYes)
modelYes[2][0] = mean_x3(TrainYes)
modelYes[2][1] = variansi_x3(TrainYes)

modelNo[0][0] = mean_x1(TrainNo)
modelNo[0][1] = variansi_x1(TrainNo)
modelNo[1][0] = mean_x2(TrainNo)
modelNo[1][1] = variansi_x2(TrainNo)
modelNo[2][0] = mean_x3(TrainNo)
modelNo[2][1] = variansi_x3(TrainNo)

print()
print(modelYes)
print(modelNo)

"""***HASIL PREDIKSI DATA UJI***"""

hasilPrediksiDataUji = []

#ARRAY DATA UJI
print("---DATA UJI---")
print(dataUji)

#DATA KESELURUHAN

for i in range(len(dataUji)):
  pYes = len(TrainYes)/len(dataLatih)* (naiveBayes(modelYes[0][0], modelYes[0][1], dataUji[i][1])) * (naiveBayes(modelYes[1][0], modelYes[1][1], dataUji[i][2])) * (naiveBayes(modelYes[2][0], modelYes[2][1], dataUji[i][3]))
  pNo = len(TrainNo)/len(dataLatih) * (naiveBayes(modelNo[0][0], modelNo[0][1], dataUji[i][1])) * (naiveBayes(modelNo[1][0], modelNo[1][1], dataUji[i][2])) * (naiveBayes(modelNo[2][0], modelNo[2][1], dataUji[i][3]))

  if pYes > pNo :
    hasilPrediksiDataUji.append(1)
  else :
    hasilPrediksiDataUji.append(0)

print()
print("---HASIL PREDIKASI DATA UJI---")
print(hasilPrediksiDataUji)

"""***MENGHITUNG AKURASI DATA UJI***"""

tp = 0
tn = 0
fp = 0
fn = 0
for i in range(len(dataUji)):
  if hasilPrediksiDataUji[i] == 1 and dataUji[i][4] == 1:
    tp = tp + 1
  elif hasilPrediksiDataUji[i] == 0 and dataUji[i][4] == 0:
    tn = tn + 1
  elif hasilPrediksiDataUji[i] == 1 and dataUji[i][4] == 0:
    fp = fp + 1
  elif hasilPrediksiDataUji[i] == 0 and dataUji[i][4] == 1:
    fn = fn + 1

hasil_akurasi = (tp+tn)/(tp+tn+fp+fn)
print("HASIL AKURASI DATA UJI : ", hasil_akurasi*100, "%")

"""***HASIL PREDIKSI DATA KESELURUHAN***"""

hasilPrediksiDataKeseluruhan = []

#DATA KESELURUHAN

print("---DATA KESELURUHAN---")
print(dataTrain)
print()

for i in range(len(dataTrain)):
  pYesAll = len(TrainYes)/len(dataLatih)* (naiveBayes(modelYes[0][0], modelYes[0][1], dataTrain[i][1])) * (naiveBayes(modelYes[1][0], modelYes[1][1], dataTrain[i][2])) * (naiveBayes(modelYes[2][0], modelYes[2][1], dataTrain[i][3]))
  pNoAll = len(TrainNo)/len(dataLatih) * (naiveBayes(modelNo[0][0], modelNo[0][1], dataTrain[i][1])) * (naiveBayes(modelNo[1][0], modelNo[1][1], dataTrain[i][2])) * (naiveBayes(modelNo[2][0], modelNo[2][1], dataTrain[i][3]))

  if pYesAll > pNoAll :
    hasilPrediksiDataKeseluruhan.append(1)
  else :
    hasilPrediksiDataKeseluruhan.append(0)

print("---HASIL PREDIKSI DATA KESELURUHAN----")
print(hasilPrediksiDataKeseluruhan)

"""***MENGHITUNG AKURASI DATA KESELURUHAN***"""

tp_ALL = 0
tn_ALL = 0
fp_ALL = 0
fn_ALL = 0
for i in range(len(dataTrain)):
  if hasilPrediksiDataKeseluruhan[i] == 1 and dataTrain[i][4] == 1:
    tp_ALL = tp_ALL + 1
  elif hasilPrediksiDataKeseluruhan[i] == 0 and dataTrain[i][4] == 0:
    tn_ALL = tn_ALL + 1
  elif hasilPrediksiDataKeseluruhan[i] == 1 and dataTrain[i][4] == 0:
    fp_ALL = fp_ALL + 1
  elif hasilPrediksiDataKeseluruhan[i] == 0 and dataTrain[i][4] == 1:
    fn_ALL = fn + 1

hasil_akurasi = (tp_ALL+tn_ALL)/(tp_ALL+tn_ALL+fp_ALL+fn_ALL)
print("HASIL AKURASI DATA KESELURUHAN : ", hasil_akurasi*100, "%")

"""***HASIL DATA TESTING***"""

dataTesting = np.array(df_test)

for i in range(len(dataTesting)):
  pYes = len(TrainYes)/len(dataLatih) *(naiveBayes(modelYes[0][0], modelYes[0][1], dataTesting[i][1])) * (naiveBayes(modelYes[1][0], modelYes[1][1], dataTesting[i][2])) * (naiveBayes(modelYes[2][0], modelYes[2][1], dataTesting[i][3]))
  pNo = len(TrainNo)/len(dataLatih) * (naiveBayes(modelNo[0][0], modelNo[0][1], dataTesting[i][1])) * (naiveBayes(modelNo[1][0], modelNo[1][1], dataTesting[i][2])) * (naiveBayes(modelNo[2][0], modelNo[2][1], dataTesting[i][3]))
  
  if pYes > pNo :
    dataTesting[i][4] = 1
  else :
    dataTesting[i][4] = 0

print("---HASIL DATA TESTING---")

Hasil_DataTesting = pd.DataFrame(dataTesting, columns =['ID', 'X1', 'X2', 'X3', 'y'])
print(Hasil_DataTesting)

#MEMBUAT FILE EXCEL
Hasil_DataTesting.to_excel('TUPRO3.xlsx')